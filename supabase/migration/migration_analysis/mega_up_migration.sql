=== Database Migration Analyzer ===
Generated on: Wed May 28 06:41:59 PM IST 2025

-- CONSOLIDATED UP MIGRATIONS
-- Apply in this order for fresh database setup

-- ========================================
-- Migration: 000001_initial_schema.up.sql
-- ========================================

BEGIN;

CREATE TYPE booking_status AS ENUM ('Pending', 'Confirmed', 'CheckedIn');
CREATE TYPE user_role_enum AS ENUM ('admin', 'customer', 'staff');
CREATE TABLE usertable (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  username VARCHAR(30) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  role user_role_enum NOT NULL
);
CREATE TABLE password_history (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  username VARCHAR(30) UNIQUE NOT NULL,
  previous_password_1 VARCHAR(255),
  previous_password_2 VARCHAR(255),
  previous_password_3 VARCHAR(255),
  CONSTRAINT fk_password_history_username FOREIGN KEY (username) REFERENCES usertable(username) ON DELETE CASCADE
);
CREATE TABLE stafftable (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  username VARCHAR(30) NOT NULL,
  name VARCHAR(70) NOT NULL,
  counter_no INTEGER,
  CONSTRAINT fk_stafftable_username FOREIGN KEY (username) REFERENCES usertable(username) ON DELETE CASCADE
);
CREATE TABLE customertable (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name VARCHAR(70) NOT NULL,
  username VARCHAR(30) UNIQUE NOT NULL,
  number VARCHAR(10) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  profile_img VARCHAR(255),
  CONSTRAINT fk_customertable_username FOREIGN KEY (username) REFERENCES usertable(username) ON DELETE CASCADE,
  CONSTRAINT check_number CHECK (number ~ '^[0-9]{10}$')
);
CREATE TABLE admin_booked_customer (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name VARCHAR(70) NOT NULL,
  number VARCHAR(10) NOT NULL,
  CONSTRAINT check_number CHECK (number ~ '^[0-9]{10}$')
);
CREATE TABLE seat (
  seat_number VARCHAR(10) PRIMARY KEY NOT NULL,
  seat_type VARCHAR(50)
);
CREATE TABLE slot (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name VARCHAR(50) NOT NULL,
  start_time TIME NOT NULL,
  end_time TIME NOT NULL
);
CREATE TABLE show (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  movie_id VARCHAR(30) NOT NULL,
  date DATE NOT NULL,
  slot_id BIGINT NOT NULL,
  cost DECIMAL(10, 2) NOT NULL,
  CONSTRAINT fk_show_slot FOREIGN KEY (slot_id) REFERENCES slot(id),
  CONSTRAINT unique_slot_date UNIQUE (slot_id, date)
);
CREATE TABLE booking (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  date DATE NOT NULL,
  show_id BIGINT,
  customer_id BIGINT,
  no_of_seats INTEGER NOT NULL,
  amount_paid DECIMAL(10, 2) NOT NULL,
  status booking_status NOT NULL DEFAULT 'Pending',
  booking_time TIMESTAMP NOT NULL DEFAULT NOW(),
  payment_type VARCHAR(50) NOT NULL DEFAULT 'Cash',
  CONSTRAINT fk_booking_show FOREIGN KEY (show_id) REFERENCES show(id),
  CONSTRAINT fk_booking_customer FOREIGN KEY (customer_id) REFERENCES admin_booked_customer(id)
);
CREATE TABLE booking_seat_mapping (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  booking_id BIGINT NOT NULL,
  seat_number VARCHAR(10) NOT NULL,
  CONSTRAINT fk_booking_seat_mapping_booking FOREIGN KEY (booking_id) REFERENCES booking(id) ON DELETE CASCADE,
  CONSTRAINT fk_booking_seat_mapping_seat FOREIGN KEY (seat_number) REFERENCES seat(seat_number)
);

COMMIT;

-- ========================================
-- Migration: 000002_seat_types.up.sql
-- ========================================

BEGIN;

CREATE TYPE seat_type_enum AS ENUM ('Standard','Deluxe');

COMMIT;

-- ========================================
-- Migration: 000003_add_security_questions.up.sql
-- ========================================

BEGIN;

CREATE TABLE security_questions (
    id SERIAL PRIMARY KEY,
    question TEXT NOT NULL
);

ALTER TABLE customertable 
ADD COLUMN security_question_id INTEGER NOT NULL REFERENCES security_questions(id),
ADD COLUMN security_answer_hash TEXT NOT NULL;

INSERT INTO security_questions (question) VALUES 
('What was the name of your first pet?'),
('What was your childhood nickname?'),
('In what city or town was your first job?'),
('What is the name of your favorite childhood friend?'),
('What is your mother''s maiden name?'),
('What high school did you attend?'),
('What was the make of your first car?'),
('What is your favorite movie?'),
('What is your favorite book?'),
('What was the street you lived on in third grade?');

CREATE INDEX idx_security_question_id ON customertable(security_question_id);

COMMIT;


-- ========================================
-- Migration: 000004_security_question_temp_tkn.up.sql
-- ========================================

BEGIN;

CREATE TABLE password_reset_tokens (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    token VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    used BOOLEAN NOT NULL DEFAULT FALSE
);
CREATE INDEX idx_password_reset_tokens_email ON password_reset_tokens(email);
CREATE INDEX idx_password_reset_tokens_token ON password_reset_tokens(token);

COMMIT;


-- ========================================
-- Migration: 000005_add_unique_constraint_email_token.up.sql
-- ========================================

BEGIN;

ALTER TABLE password_reset_tokens 
ADD CONSTRAINT unique_email_token UNIQUE (email, token);

COMMIT;


-- ========================================
-- Migration: 000006_created_at_column.up.sql
-- ========================================

BEGIN;

ALTER TABLE usertable
ADD COLUMN created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP;

COMMIT;


-- ========================================
-- Migration: 000007_booking_table_modifications.up.sql
-- ========================================

BEGIN;

ALTER TABLE booking
ADD COLUMN customer_username VARCHAR(30) NULL,
ADD CONSTRAINT fk_booking_customer_username 
    FOREIGN KEY (customer_username) REFERENCES customertable(username) 
    ON DELETE CASCADE;

ALTER TABLE booking 
ADD CONSTRAINT check_customer_type 
    CHECK (
        (customer_id IS NOT NULL AND customer_username IS NULL) OR 
        (customer_id IS NULL AND customer_username IS NOT NULL) 
    );

COMMIT;

-- ========================================
-- Migration: 000008_payment_mode_enum.up.sql
-- ========================================

BEGIN;

CREATE TYPE payment_mode_enum AS ENUM ('Cash', 'Card');

ALTER TABLE booking ALTER COLUMN payment_type DROP DEFAULT;

ALTER TABLE booking 
ALTER COLUMN payment_type TYPE payment_mode_enum 
USING 
    CASE 
        WHEN payment_type = 'Cash' THEN 'Cash'::payment_mode_enum
        WHEN payment_type = 'Card' THEN 'Card'::payment_mode_enum
        ELSE 'Cash'::payment_mode_enum
    END;

ALTER TABLE booking 
ALTER COLUMN payment_type SET DEFAULT 'Cash'::payment_mode_enum;

COMMIT;


-- ========================================
-- Migration: 000009_booking_timestamp_update.up.sql
-- ========================================

BEGIN;

ALTER TABLE booking 
ALTER COLUMN booking_time TYPE TIMESTAMP WITH TIME ZONE,
ALTER COLUMN booking_time SET DEFAULT CURRENT_TIMESTAMP;

COMMIT;

-- ========================================
-- Migration: 000010_relationship_btw_abc_booking.up.sql
-- ========================================

BEGIN;

ALTER TABLE booking ADD CONSTRAINT unique_customer_id UNIQUE (customer_id);

ALTER TABLE booking DROP CONSTRAINT IF EXISTS fk_booking_customer;

ALTER TABLE admin_booked_customer
ADD CONSTRAINT fk_admin_customer_booking
FOREIGN KEY (id)
REFERENCES booking(customer_id)
ON DELETE CASCADE;

COMMIT;

-- ========================================
-- Migration: 000011_payment_txd_table.up.sql
-- ========================================

BEGIN;

CREATE TABLE payment_transaction (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    booking_id BIGINT NOT NULL,
    transaction_id VARCHAR(255) NOT NULL,
    payment_method payment_mode_enum NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    status VARCHAR(50) NOT NULL,
    processed_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_payment_transaction_booking FOREIGN KEY (booking_id) REFERENCES booking(id) ON DELETE CASCADE
);

CREATE INDEX idx_payment_transaction_booking_id ON payment_transaction(booking_id);

COMMIT;


-- ========================================
-- Migration: 000012_pending_booking_tracker.up.sql
-- ========================================

BEGIN;

CREATE TABLE pending_booking_tracker (
    booking_id BIGINT PRIMARY KEY,
    expiration_time TIMESTAMP WITH TIME ZONE NOT NULL,
    CONSTRAINT fk_pending_booking_tracker_booking FOREIGN KEY (booking_id) REFERENCES booking(id) ON DELETE CASCADE
);

COMMIT;


-- ========================================
-- Migration: 000013_add_foreign_key_indices.up.sql
-- ========================================

BEGIN;

CREATE INDEX idx_booking_customer_username ON booking(customer_username);

CREATE INDEX idx_booking_show_id ON booking(show_id);

CREATE INDEX idx_booking_seat_mapping_booking_id ON booking_seat_mapping(booking_id);

CREATE INDEX idx_booking_seat_mapping_seat_number ON booking_seat_mapping(seat_number);

CREATE INDEX idx_stafftable_username ON stafftable(username);

COMMIT;


-- ========================================
-- Migration: 000014_circular_dependency_fix.up.sql
-- ========================================

BEGIN;

ALTER TABLE admin_booked_customer DROP CONSTRAINT IF EXISTS fk_admin_customer_booking;
ALTER TABLE booking DROP CONSTRAINT IF EXISTS unique_customer_id;

ALTER TABLE admin_booked_customer ADD COLUMN booking_id BIGINT;

ALTER TABLE admin_booked_customer 
ADD CONSTRAINT fk_admin_customer_booking
FOREIGN KEY (booking_id) REFERENCES booking(id) ON DELETE CASCADE;

COMMIT;

-- ========================================
-- Migration: 000015_performance_idices.up.sql
-- ========================================

BEGIN;

CREATE INDEX IF NOT EXISTS idx_booking_status ON booking (status);
CREATE INDEX IF NOT EXISTS idx_booking_booking_time ON booking (booking_time);
CREATE INDEX IF NOT EXISTS idx_show_slot_id ON show (slot_id);
CREATE INDEX IF NOT EXISTS idx_show_movie_id ON show (movie_id);
CREATE INDEX IF NOT EXISTS idx_admin_booked_customer_booking_id ON admin_booked_customer (booking_id);

COMMENT ON INDEX idx_booking_status IS 'Improves performance when filtering bookings by status';
COMMENT ON INDEX idx_booking_booking_time IS 'Improves performance for timeframe-based queries';
COMMENT ON INDEX idx_show_slot_id IS 'Improves performance when filtering shows by slot';
COMMENT ON INDEX idx_show_movie_id IS 'Improves performance when filtering shows by movie';
COMMENT ON INDEX idx_admin_booked_customer_booking_id IS 'Covers foreign key fk_admin_customer_booking for better join performance';

COMMIT;

-- ========================================
-- Migration: 000016_wallet_payment_type.up.sql
-- ========================================

BEGIN;

ALTER TYPE payment_mode_enum ADD VALUE IF NOT EXISTS 'Wallet';

COMMIT;

-- ========================================
-- Migration: 000017_wallet_db_tables.up.sql
-- ========================================

BEGIN;

CREATE TABLE customer_wallet (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR(30) UNIQUE NOT NULL,
    balance DECIMAL(10, 2) NOT NULL DEFAULT 0.00,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_customer_wallet_username FOREIGN KEY (username) REFERENCES customertable(username) ON DELETE CASCADE,
    CONSTRAINT check_balance CHECK (balance >= 0)
);

CREATE INDEX idx_wallet_username ON customer_wallet(username);

COMMIT;


-- ========================================
-- Migration: 000018_wallet_transaction_type_enum.up.sql
-- ========================================

BEGIN;

CREATE TYPE wallet_transaction_type AS ENUM ('ADD', 'DEDUCT');

COMMIT;

-- ========================================
-- Migration: 000019_wallet_transaction_table.up.sql
-- ========================================

BEGIN;

CREATE TABLE wallet_transaction (
    id BIGSERIAL PRIMARY KEY,
    wallet_id BIGINT NOT NULL,
    username VARCHAR(30) NOT NULL,
    booking_id BIGINT, -- nullable
    transaction_id VARCHAR(255) NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    transaction_type wallet_transaction_type NOT NULL,
    CONSTRAINT fk_wallet_id FOREIGN KEY (wallet_id) REFERENCES customer_wallet(id) ON DELETE CASCADE,
    CONSTRAINT fk_wallet_username FOREIGN KEY (username) REFERENCES customertable(username),
    CONSTRAINT fk_wallet_booking FOREIGN KEY (booking_id) REFERENCES booking(id) ON DELETE SET NULL
);

CREATE INDEX idx_wallet_transaction_wallet_id ON wallet_transaction(wallet_id);
CREATE INDEX idx_wallet_transaction_username ON wallet_transaction(username);
CREATE INDEX idx_wallet_transaction_booking_id ON wallet_transaction(booking_id);
CREATE INDEX idx_wallet_transaction_timestamp ON wallet_transaction(timestamp);

COMMIT;

-- ========================================
-- Migration: 000020_wallet_customer_cascade.up.sql
-- ========================================

BEGIN;

ALTER TABLE wallet_transaction DROP CONSTRAINT fk_wallet_username;
ALTER TABLE customer_wallet DROP CONSTRAINT fk_customer_wallet_username;

ALTER TABLE wallet_transaction 
ADD CONSTRAINT fk_wallet_username 
FOREIGN KEY (username) REFERENCES customertable(username) ON DELETE CASCADE;

ALTER TABLE customer_wallet 
ADD CONSTRAINT fk_customer_wallet_username 
FOREIGN KEY (username) REFERENCES customertable(username) ON DELETE CASCADE;

COMMIT;

-- ========================================
-- Migration: 000021_optimize_database_indices.up.sql
-- ========================================

BEGIN;

DROP INDEX IF EXISTS idx_booking_seat_mapping_seat_number;
DROP INDEX IF EXISTS idx_stafftable_username; 

CREATE INDEX idx_booking_date_status ON booking(date, status) 
WHERE status IN ('Pending', 'Confirmed');
COMMENT ON INDEX idx_booking_date_status IS 'Optimizes booking queries filtered by date and active status';

CREATE INDEX idx_show_date_slot ON show(date, slot_id);
COMMENT ON INDEX idx_show_date_slot IS 'Improves show availability queries by date and time slot';

CREATE INDEX idx_wallet_transaction_user_time ON wallet_transaction(username, timestamp DESC);
COMMENT ON INDEX idx_wallet_transaction_user_time IS 'Optimizes wallet transaction history queries';

CREATE INDEX idx_payment_transaction_booking_status ON payment_transaction(booking_id, status);
COMMENT ON INDEX idx_payment_transaction_booking_status IS 'Improves payment status lookup performance';

CREATE INDEX idx_active_bookings ON booking(show_id, customer_username) 
WHERE status IN ('Pending', 'Confirmed');
COMMENT ON INDEX idx_active_bookings IS 'Optimizes queries for active bookings only';

CREATE INDEX idx_active_reset_tokens ON password_reset_tokens(email, expires_at) 
WHERE used = FALSE;
COMMENT ON INDEX idx_active_reset_tokens IS 'Improves password reset token lookup for unused tokens';

CREATE INDEX idx_wallet_balance_lookup ON customer_wallet(username, balance) 
WHERE balance > 0;
COMMENT ON INDEX idx_wallet_balance_lookup IS 'Optimizes wallet balance queries for customers with funds';

CREATE INDEX idx_wallet_txn_aggregation ON wallet_transaction(username, transaction_type, amount);
COMMENT ON INDEX idx_wallet_txn_aggregation IS 'Improves wallet transaction aggregation queries';

CREATE INDEX idx_booking_details_covering ON booking(id, show_id, customer_username, status, amount_paid, booking_time);
COMMENT ON INDEX idx_booking_details_covering IS 'Covering index for booking detail queries to avoid table lookups';

CREATE INDEX idx_show_movie_date ON show(movie_id, date, slot_id);
COMMENT ON INDEX idx_show_movie_date IS 'Optimizes movie show schedule queries';

COMMIT;



-- MIGRATION SUMMARY
-- Total UP migrations: 21
-- Total DOWN migrations: 21
